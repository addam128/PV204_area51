// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pwmanager.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_pwmanager_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_pwmanager_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_pwmanager_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_pwmanager_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pwmanager_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_pwmanager_2eproto_metadata_getter(int index);
class Entry;
struct EntryDefaultTypeInternal;
extern EntryDefaultTypeInternal _Entry_default_instance_;
class Wallet;
struct WalletDefaultTypeInternal;
extern WalletDefaultTypeInternal _Wallet_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::Entry* Arena::CreateMaybeMessage<::Entry>(Arena*);
template<> ::Wallet* Arena::CreateMaybeMessage<::Wallet>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class Entry PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Entry) */ {
 public:
  inline Entry() : Entry(nullptr) {}
  virtual ~Entry();
  explicit constexpr Entry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Entry(const Entry& from);
  Entry(Entry&& from) noexcept
    : Entry() {
    *this = ::std::move(from);
  }

  inline Entry& operator=(const Entry& from) {
    CopyFrom(from);
    return *this;
  }
  inline Entry& operator=(Entry&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Entry& default_instance() {
    return *internal_default_instance();
  }
  static inline const Entry* internal_default_instance() {
    return reinterpret_cast<const Entry*>(
               &_Entry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Entry& a, Entry& b) {
    a.Swap(&b);
  }
  inline void Swap(Entry* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Entry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Entry* New() const final {
    return CreateMaybeMessage<Entry>(nullptr);
  }

  Entry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Entry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Entry& from);
  void MergeFrom(const Entry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Entry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Entry";
  }
  protected:
  explicit Entry(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_pwmanager_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServicenameFieldNumber = 1,
    kUsernameFieldNumber = 2,
    kPasswordFieldNumber = 3,
  };
  // required string servicename = 1;
  bool has_servicename() const;
  private:
  bool _internal_has_servicename() const;
  public:
  void clear_servicename();
  const std::string& servicename() const;
  void set_servicename(const std::string& value);
  void set_servicename(std::string&& value);
  void set_servicename(const char* value);
  void set_servicename(const char* value, size_t size);
  std::string* mutable_servicename();
  std::string* release_servicename();
  void set_allocated_servicename(std::string* servicename);
  private:
  const std::string& _internal_servicename() const;
  void _internal_set_servicename(const std::string& value);
  std::string* _internal_mutable_servicename();
  public:

  // required string username = 2;
  bool has_username() const;
  private:
  bool _internal_has_username() const;
  public:
  void clear_username();
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // required string password = 3;
  bool has_password() const;
  private:
  bool _internal_has_password() const;
  public:
  void clear_password();
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // @@protoc_insertion_point(class_scope:Entry)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr servicename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  friend struct ::TableStruct_pwmanager_2eproto;
};
// -------------------------------------------------------------------

class Wallet PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Wallet) */ {
 public:
  inline Wallet() : Wallet(nullptr) {}
  virtual ~Wallet();
  explicit constexpr Wallet(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Wallet(const Wallet& from);
  Wallet(Wallet&& from) noexcept
    : Wallet() {
    *this = ::std::move(from);
  }

  inline Wallet& operator=(const Wallet& from) {
    CopyFrom(from);
    return *this;
  }
  inline Wallet& operator=(Wallet&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Wallet& default_instance() {
    return *internal_default_instance();
  }
  static inline const Wallet* internal_default_instance() {
    return reinterpret_cast<const Wallet*>(
               &_Wallet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Wallet& a, Wallet& b) {
    a.Swap(&b);
  }
  inline void Swap(Wallet* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Wallet* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Wallet* New() const final {
    return CreateMaybeMessage<Wallet>(nullptr);
  }

  Wallet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Wallet>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Wallet& from);
  void MergeFrom(const Wallet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Wallet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Wallet";
  }
  protected:
  explicit Wallet(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_pwmanager_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntriesFieldNumber = 3,
    kMasterPasswordFieldNumber = 2,
    kNumberOfEntriesFieldNumber = 1,
  };
  // repeated .Entry entries = 3;
  int entries_size() const;
  private:
  int _internal_entries_size() const;
  public:
  void clear_entries();
  ::Entry* mutable_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Entry >*
      mutable_entries();
  private:
  const ::Entry& _internal_entries(int index) const;
  ::Entry* _internal_add_entries();
  public:
  const ::Entry& entries(int index) const;
  ::Entry* add_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Entry >&
      entries() const;

  // required string master_password = 2;
  bool has_master_password() const;
  private:
  bool _internal_has_master_password() const;
  public:
  void clear_master_password();
  const std::string& master_password() const;
  void set_master_password(const std::string& value);
  void set_master_password(std::string&& value);
  void set_master_password(const char* value);
  void set_master_password(const char* value, size_t size);
  std::string* mutable_master_password();
  std::string* release_master_password();
  void set_allocated_master_password(std::string* master_password);
  private:
  const std::string& _internal_master_password() const;
  void _internal_set_master_password(const std::string& value);
  std::string* _internal_mutable_master_password();
  public:

  // required uint32 number_of_entries = 1;
  bool has_number_of_entries() const;
  private:
  bool _internal_has_number_of_entries() const;
  public:
  void clear_number_of_entries();
  ::PROTOBUF_NAMESPACE_ID::uint32 number_of_entries() const;
  void set_number_of_entries(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_number_of_entries() const;
  void _internal_set_number_of_entries(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Wallet)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Entry > entries_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr master_password_;
  ::PROTOBUF_NAMESPACE_ID::uint32 number_of_entries_;
  friend struct ::TableStruct_pwmanager_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Entry

// required string servicename = 1;
inline bool Entry::_internal_has_servicename() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Entry::has_servicename() const {
  return _internal_has_servicename();
}
inline void Entry::clear_servicename() {
  servicename_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Entry::servicename() const {
  // @@protoc_insertion_point(field_get:Entry.servicename)
  return _internal_servicename();
}
inline void Entry::set_servicename(const std::string& value) {
  _internal_set_servicename(value);
  // @@protoc_insertion_point(field_set:Entry.servicename)
}
inline std::string* Entry::mutable_servicename() {
  // @@protoc_insertion_point(field_mutable:Entry.servicename)
  return _internal_mutable_servicename();
}
inline const std::string& Entry::_internal_servicename() const {
  return servicename_.Get();
}
inline void Entry::_internal_set_servicename(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  servicename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Entry::set_servicename(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  servicename_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Entry.servicename)
}
inline void Entry::set_servicename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  servicename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Entry.servicename)
}
inline void Entry::set_servicename(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  servicename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Entry.servicename)
}
inline std::string* Entry::_internal_mutable_servicename() {
  _has_bits_[0] |= 0x00000001u;
  return servicename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Entry::release_servicename() {
  // @@protoc_insertion_point(field_release:Entry.servicename)
  if (!_internal_has_servicename()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return servicename_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Entry::set_allocated_servicename(std::string* servicename) {
  if (servicename != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  servicename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), servicename,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Entry.servicename)
}

// required string username = 2;
inline bool Entry::_internal_has_username() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Entry::has_username() const {
  return _internal_has_username();
}
inline void Entry::clear_username() {
  username_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Entry::username() const {
  // @@protoc_insertion_point(field_get:Entry.username)
  return _internal_username();
}
inline void Entry::set_username(const std::string& value) {
  _internal_set_username(value);
  // @@protoc_insertion_point(field_set:Entry.username)
}
inline std::string* Entry::mutable_username() {
  // @@protoc_insertion_point(field_mutable:Entry.username)
  return _internal_mutable_username();
}
inline const std::string& Entry::_internal_username() const {
  return username_.Get();
}
inline void Entry::_internal_set_username(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Entry::set_username(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  username_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Entry.username)
}
inline void Entry::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Entry.username)
}
inline void Entry::set_username(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Entry.username)
}
inline std::string* Entry::_internal_mutable_username() {
  _has_bits_[0] |= 0x00000002u;
  return username_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Entry::release_username() {
  // @@protoc_insertion_point(field_release:Entry.username)
  if (!_internal_has_username()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return username_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Entry::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Entry.username)
}

// required string password = 3;
inline bool Entry::_internal_has_password() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Entry::has_password() const {
  return _internal_has_password();
}
inline void Entry::clear_password() {
  password_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Entry::password() const {
  // @@protoc_insertion_point(field_get:Entry.password)
  return _internal_password();
}
inline void Entry::set_password(const std::string& value) {
  _internal_set_password(value);
  // @@protoc_insertion_point(field_set:Entry.password)
}
inline std::string* Entry::mutable_password() {
  // @@protoc_insertion_point(field_mutable:Entry.password)
  return _internal_mutable_password();
}
inline const std::string& Entry::_internal_password() const {
  return password_.Get();
}
inline void Entry::_internal_set_password(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Entry::set_password(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  password_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Entry.password)
}
inline void Entry::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Entry.password)
}
inline void Entry::set_password(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Entry.password)
}
inline std::string* Entry::_internal_mutable_password() {
  _has_bits_[0] |= 0x00000004u;
  return password_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Entry::release_password() {
  // @@protoc_insertion_point(field_release:Entry.password)
  if (!_internal_has_password()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return password_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Entry::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Entry.password)
}

// -------------------------------------------------------------------

// Wallet

// required uint32 number_of_entries = 1;
inline bool Wallet::_internal_has_number_of_entries() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Wallet::has_number_of_entries() const {
  return _internal_has_number_of_entries();
}
inline void Wallet::clear_number_of_entries() {
  number_of_entries_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Wallet::_internal_number_of_entries() const {
  return number_of_entries_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Wallet::number_of_entries() const {
  // @@protoc_insertion_point(field_get:Wallet.number_of_entries)
  return _internal_number_of_entries();
}
inline void Wallet::_internal_set_number_of_entries(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  number_of_entries_ = value;
}
inline void Wallet::set_number_of_entries(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_number_of_entries(value);
  // @@protoc_insertion_point(field_set:Wallet.number_of_entries)
}

// required string master_password = 2;
inline bool Wallet::_internal_has_master_password() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Wallet::has_master_password() const {
  return _internal_has_master_password();
}
inline void Wallet::clear_master_password() {
  master_password_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Wallet::master_password() const {
  // @@protoc_insertion_point(field_get:Wallet.master_password)
  return _internal_master_password();
}
inline void Wallet::set_master_password(const std::string& value) {
  _internal_set_master_password(value);
  // @@protoc_insertion_point(field_set:Wallet.master_password)
}
inline std::string* Wallet::mutable_master_password() {
  // @@protoc_insertion_point(field_mutable:Wallet.master_password)
  return _internal_mutable_master_password();
}
inline const std::string& Wallet::_internal_master_password() const {
  return master_password_.Get();
}
inline void Wallet::_internal_set_master_password(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  master_password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Wallet::set_master_password(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  master_password_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Wallet.master_password)
}
inline void Wallet::set_master_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  master_password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Wallet.master_password)
}
inline void Wallet::set_master_password(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  master_password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Wallet.master_password)
}
inline std::string* Wallet::_internal_mutable_master_password() {
  _has_bits_[0] |= 0x00000001u;
  return master_password_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Wallet::release_master_password() {
  // @@protoc_insertion_point(field_release:Wallet.master_password)
  if (!_internal_has_master_password()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return master_password_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Wallet::set_allocated_master_password(std::string* master_password) {
  if (master_password != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  master_password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), master_password,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Wallet.master_password)
}

// repeated .Entry entries = 3;
inline int Wallet::_internal_entries_size() const {
  return entries_.size();
}
inline int Wallet::entries_size() const {
  return _internal_entries_size();
}
inline void Wallet::clear_entries() {
  entries_.Clear();
}
inline ::Entry* Wallet::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:Wallet.entries)
  return entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Entry >*
Wallet::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:Wallet.entries)
  return &entries_;
}
inline const ::Entry& Wallet::_internal_entries(int index) const {
  return entries_.Get(index);
}
inline const ::Entry& Wallet::entries(int index) const {
  // @@protoc_insertion_point(field_get:Wallet.entries)
  return _internal_entries(index);
}
inline ::Entry* Wallet::_internal_add_entries() {
  return entries_.Add();
}
inline ::Entry* Wallet::add_entries() {
  // @@protoc_insertion_point(field_add:Wallet.entries)
  return _internal_add_entries();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Entry >&
Wallet::entries() const {
  // @@protoc_insertion_point(field_list:Wallet.entries)
  return entries_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_pwmanager_2eproto
